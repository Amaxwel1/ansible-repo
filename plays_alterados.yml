playbook_create_report_email.yml

- name: Consolidar relatório geral de serviços
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Juntar relatórios de cada host
      ansible.builtin.set_fact:
        service_reports: >-
          {{
            (groups.linux_targets | default([]) + groups.windows_targets | default([]))
            | map('extract', hostvars, 'service_host_report')
            | select('defined')
            | list
          }}
        unreachable_hosts: "{{ unreachable_hosts | default([]) }}"

    - name: Separar relatórios com erro de execução
      ansible.builtin.set_fact:
        exec_error_reports: "{{ service_reports | selectattr('error','defined') | list }}"
        normal_reports: "{{ service_reports | rejectattr('error','defined') | list }}"

    - name: Calcular lista de serviços testados (Survey)
      ansible.builtin.set_fact:
        services_tested: "{{ services | default([]) | unique | join(', ') }}"

    - name: Calcular linhas NOK
      ansible.builtin.set_fact:
        bad_rows: >-
          {{
            normal_reports
            | map(attribute='rows')
            | flatten
            | selectattr('ok','equalto',False)
            | list
          }}

    - name: Calcular flag any_errors
      ansible.builtin.set_fact:
        any_errors: >-
          {{
            (unreachable_hosts | length > 0)
            or (exec_error_reports | length > 0)
            or (bad_rows | length > 0)
          }}

    - name: Montar HTML final
      ansible.builtin.set_fact:
        send_mail_body: |
          {% set show_map = {
            'restarted':'started',
            'restart':'started',
            'running':'started'
          } %}
          <h2>Gerenciamento de Serviços</h2>
          <p><b>Motivo:</b> {{ (motivo | default('N/D')) | e }}</p>
          {% if services_tested %}
            <p><b>Serviços gerenciados:</b> {{ services_tested }}</p>
          {% endif %}

          {% if unreachable_hosts and unreachable_hosts|length > 0 %}
          <h3 style="color:#d9534f;">Hosts inalcançáveis</h3>
          <ul>
          {% for h in unreachable_hosts %}
            <li>{{ h }}</li>
          {% endfor %}
          </ul>
          {% endif %}

          {% if exec_error_reports %}
          <h3 style="color:#f0ad4e;">Hosts com erro de execução de módulo</h3>
          <ul>
          {% for rep in exec_error_reports %}
            <li><b>{{ rep.host }}</b>: {{ rep.error }}</li>
          {% endfor %}
          </ul>
          {% endif %}

          {% set linux_reports   = normal_reports | selectattr('os','equalto','linux')   | list %}
          {% set windows_reports = normal_reports | selectattr('os','equalto','windows') | list %}

          {% if linux_reports %}
            {% set expected_linux_raw = linux_reports[0].expected | lower %}
            {% set expected_linux = show_map.get(expected_linux_raw, expected_linux_raw) | capitalize %}
            <h3>Servidores Linux</h3>
            <p><b>Estado esperado:</b> {{ expected_linux }}</p>
            <table style="border-collapse:collapse;font-family:Arial;font-size:12px;">
              <tr style="background:#f2f2f2;">
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Servidor</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Serviço</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Estado</th>
              </tr>
              {% for rep in linux_reports %}
                {% for r in rep.rows %}
                  {% set after_disp = show_map.get(r.after|lower, r.after) %}
                  <tr>
                    <td style="border:1px solid #ccc;padding:4px;">{{ rep.host }}</td>
                    <td style="border:1px solid #ccc;padding:4px;">{{ r.name }}</td>
                    <td style="border:1px solid #ccc;padding:4px;color:{{ 'green' if r.ok else 'red' }};">
                      {{ after_disp }}
                    </td>
                  </tr>
                {% endfor %}
              {% endfor %}
            </table>
          {% endif %}

          {% if windows_reports %}
            {% set expected_windows_raw = windows_reports[0].expected | lower %}
            {% set expected_windows = show_map.get(expected_windows_raw, expected_windows_raw) | capitalize %}
            <h3 style="margin-top:24px;">Servidores Windows</h3>
            <p><b>Estado esperado:</b> {{ expected_windows }}</p>
            <table style="border-collapse:collapse;font-family:Arial;font-size:12px;">
              <tr style="background:#f2f2f2;">
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Servidor</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Serviço</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Estado</th>
              </tr>
              {% for rep in windows_reports %}
                {% for r in rep.rows %}
                  {% set after_disp = show_map.get(r.after|lower, r.after) %}
                  <tr>
                    <td style="border:1px solid #ccc;padding:4px;">{{ rep.host }}</td>
                    <td style="border:1px solid #ccc;padding:4px;">{{ r.name }}</td>
                    <td style="border:1px solid #ccc;padding:4px;color:{{ 'green' if r.ok else 'red' }};">
                      {{ after_disp }}
                    </td>
                  </tr>
                {% endfor %}
              {% endfor %}
            </table>
          {% endif %}

          {% if not any_errors %}
            <p style="color:green;margin-top:18px;"><b>Todos os serviços estão no estado esperado.</b></p>
          {% else %}
            <p style="color:red;margin-top:18px;"><b>Existem divergências (ver seções acima).</b></p>
          {% endif %}

    - name: Definir subject
      ansible.builtin.set_stats:
        data:
          send_mail_subject: "Ansible-Report - Job #{{ awx_job_id }} - {{ awx_job_template_name }} - {{ 'SUCESSO' if not any_errors else 'ALERTA' }}"
          send_mail_body: "{{ send_mail_body }}"


playbook_service_linux.yml

---
- name: Gerenciar serviços em hosts Linux
  hosts: linux_targets
  become: true
  become_user: root
  
  gather_facts: false
  vars:
    state_map:
      start: started
      stop: stopped
      restart: restarted
    lsm_state: "{{ state_map.get(service_state | lower | trim, service_state) }}"
    lsm_errors: []
    linux_services: "{{ hostvars['localhost'].linux_services | default([]) }}"
    linux_custom_cmds: "{{ hostvars['localhost'].linux_custom_cmds | default({}) }}"
  tasks:
    - name: Testar execução de módulo (perm / python / sudo)
      ansible.builtin.command: /usr/bin/true
      register: lsm_perm_test
      ignore_errors: true

    - name: Registrar erro de execução e montar relatório vazio (Linux)
      ansible.builtin.set_fact:
        service_host_report:
          host: "{{ inventory_hostname }}"
          os: "linux"
          expected: "{{ lsm_state }}"
          rows: []
          error: "{{ lsm_perm_test.msg | default(lsm_perm_test.stderr) | default('Falha ao executar módulos Ansible (permissão/python)') }}"
      when: lsm_perm_test is failed

    - name: Encerrar host (Linux) em caso de erro de execução
      ansible.builtin.meta: end_host
      when: lsm_perm_test is failed
  
    - name: Captura apenas os fatos necessários
      ansible.builtin.setup:
        gather_subset:
        - '!all'
        - '!min'
        - platform
        - distribution

    - name: Gerenciar serviços nos hosts linux
      ansible.builtin.include_tasks: tasks/linux_manager_service.yml

manage_snapshot.yaml

---
- name: VMware Snapshot Orchestrator
  hosts: localhost
  gather_facts: false
  connection: local
  environment:
    TZ: America/Sao_Paulo
  vars:
    action: "{{ action | default('info') }}"
    vcenter_hostname: "{{ vcenter_hostname }}"
    survey_snapshot_name: "{{ snapshot_name }}"
    datacenter:
      vcenter.agorasenior.corp: MEC_OSASCO
      vcenter-dr.agorasenior.corp: MEC_ALPHAVILLE
    acao_map:
      "CRIAR SNAPSHOTS": create
      "DELETAR SNAPSHOTS": delete
      "BUSCAR INFORMAÇÕES DOS SNAPSHOTS": info

  pre_tasks:
    - name: Traduzir ação do Survey para action interno
      ansible.builtin.set_fact:
        action: "{{ acao_map[acao] }}"

    - name: Validar parâmetros básicos
      ansible.builtin.assert:
        that:
          - action in ['create','delete','info']
          - vcenter_hostname | length > 0
          - vm_fqdn is defined
        fail_msg: "Parâmetros obrigatórios ausentes (action, vcenter_hostname, vm_fqdn)."

    - name: Montar lista de FQDNs (suporta múltiplos separados por vírgula)
      ansible.builtin.set_fact:
        vm_fqdns_list: >-
          {{ vm_fqdn | string | split(',') | map('trim') | reject('equalto','') | list }}

    - name: Derivar guest_names a partir dos FQDNs
      ansible.builtin.set_fact:
        guest_names: "{{ vm_fqdns_list | map('regex_replace', '\\..*$', '') | list }}"

    - name: Resolver datacenter pelo vCenter
      ansible.builtin.set_fact:
        this_datacenter: "{{ datacenter[vcenter_hostname] | default(omit) }}"

    - name: Validar datacenter mapeado
      ansible.builtin.assert:
        that:
          - this_datacenter is defined
        fail_msg: "Datacenter não mapeado para o vCenter {{ vcenter_hostname }}."

    - name: Definir guest_name a partir da primeira VM (apenas delete)
      ansible.builtin.set_fact:
        guest_name: "{{ guest_names[0] }}"
      when: action == 'delete'

    - name: Garantir que delete receba UMA VM
      ansible.builtin.assert:
        that:
          - guest_names | length == 1
        fail_msg: "Para deletar, informe apenas UMA VM em vm_fqdn."
      when: action == 'delete'

    - name: Exigir snapshot_name quando a ação for delete
      ansible.builtin.assert:
        that:
          - survey_snapshot_name is defined
          - survey_snapshot_name | string | trim | length > 0
        fail_msg: "snapshot_name é obrigatório para a ação delete."
      when: action == 'delete'

  tasks:
    - name: Criar snapshot
      ansible.builtin.include_tasks: tasks/create.yml
      when: action == 'create'

    - name: Deletar snapshot
      ansible.builtin.include_tasks: tasks/delete.yml
      when: action == 'delete'

    - name: Consultar snapshots
      ansible.builtin.include_tasks: tasks/info.yml
      when: action == 'info'

create.yaml

---
- name: Iniciar relatório de criação
  ansible.builtin.set_fact:
    report_html: ""

- name: Criar snapshot em cada VM
  community.vmware.vmware_guest_snapshot:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    validate_certs: "{{ validate_certs }}"
    datacenter: "{{ this_datacenter }}"
    folder: "/{{ this_datacenter }}/vm/"
    name: "{{ vm }}"
    state: present
    snapshot_name: >-
      {{
        (survey_snapshot_name is defined and (survey_snapshot_name | string | trim) != '')
        | ternary(survey_snapshot_name, vm ~ '-' ~ ('%Y%m%d%H%M%S' | strftime) ~ '-ansible')
      }}
    description: Snapshot criado pelo Ansible
  loop: "{{ guest_names }}"
  loop_control:
    loop_var: vm
    label: "{{ vm }}"
  register: create_results
  failed_when: false

- name: Montar relatório por VM (sucesso/erro)
  ansible.builtin.set_fact:
    report_html: >-
      {{ report_html }}
      <li>
        VM <b>{{ item.item }}</b> —
        snapshot <b>{{ item.invocation.module_args.snapshot_name }}</b> :
        {{ 'criado' if (item.failed is not defined or not item.failed) else 'falhou: ' ~ (item.msg | default('erro')) }}
      </li>
  loop: "{{ create_results.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Contar sucessos e falhas
  ansible.builtin.set_fact:
    total_items: "{{ create_results.results | length }}"
    failed_items: "{{ create_results.results | selectattr('failed','defined') | selectattr('failed') | list | length }}"
    success_items: "{{ total_items | int - failed_items | int }}"

- name: Email de falha (todas as VMs falharam)
  ansible.builtin.set_stats:
    data:
      send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
      send_mail_body: |
        <p><b>Falha ao criar snapshots</b> (todas as VMs falharam).</p>
        <ul>
        {{ report_html }}
        </ul>
        <p>vCenter: <b>{{ vcenter_hostname }}</b></p>
        <p>Datacenter: <b>{{ this_datacenter }}</b></p>
        <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>
  when: success_items | int == 0

- name: Email de sucesso parcial/total
  ansible.builtin.set_stats:
    data:
      send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
      send_mail_body: |
        {{ send_mail_body | default('') }}
        <p><b>Criação de snapshots finalizada</b> — Sucesso: {{ success_items }}/{{ total_items }}.</p>
        <ul>
        {{ report_html }}
        </ul>
        <p>vCenter: <b>{{ vcenter_hostname }}</b></p>
        <p>Datacenter: <b>{{ this_datacenter }}</b></p>
        <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>
  when: success_items | int > 0


delete.yaml

---
- name: Iniciar relatório de deleção
  ansible.builtin.set_fact:
    report_html: ""

- name: Preparar lista de snapshots a deletar (separados por vírgula)
  ansible.builtin.set_fact:
    snapshot_names_list: >-
      {{
        survey_snapshot_name | string | split(',') | map('trim') | reject('equalto','') | list
      }}

- name: Validar que ao menos um snapshot foi informado
  ansible.builtin.assert:
    that: ["snapshot_names_list | length > 0"]
    fail_msg: "Para delete, informe um ou mais snapshots separados por vírgula em snapshot_name."

- name: Remover snapshot {{ sname }} da VM {{ guest_name }}
  community.vmware.vmware_guest_snapshot:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    validate_certs: "{{ validate_certs }}"
    datacenter: "{{ this_datacenter }}"
    folder: "/{{ this_datacenter }}/vm/"
    name: "{{ guest_name }}"
    state: absent
    snapshot_name: "{{ sname }}"
    remove_children: false
  loop: "{{ snapshot_names_list }}"
  loop_control:
    loop_var: sname
    label: "{{ sname }}"
  register: del_results
  failed_when: false

- name: Montar relatório de deleção
  ansible.builtin.set_fact:
    report_html: >-
      {{ report_html }}
      <li>Snapshot <b>{{ item.item }}</b> {{ 'deletado' if (item.failed is not defined or not item.failed) else 'falhou' }} na VM <b>{{ guest_name }}</b>.</li>
  loop: "{{ del_results.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Contar sucessos e falhas
  ansible.builtin.set_fact:
    total_items: "{{ del_results.results | length }}"
    failed_items: "{{ del_results.results | selectattr('failed','defined') | selectattr('failed') | list | length }}"
    success_items: "{{ total_items | int - failed_items | int }}"

- name: Email de falha (todos os snapshots falharam)
  ansible.builtin.set_stats:
    data:
      send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
      send_mail_body: |
        <p><b>Falha ao remover snapshots</b> (todos falharam) da VM <b>{{ guest_name }}</b>.</p>
        <ul>
        {{ report_html }}
        </ul>
        <p>vCenter: <b>{{ vcenter_hostname }}</b></p>
        <p>Datacenter: <b>{{ this_datacenter }}</b></p>
        <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>
  when: success_items | int == 0

- name: Email de sucesso parcial/total
  ansible.builtin.set_stats:
    data:
      send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
      send_mail_body: |
        {{ send_mail_body | default('') }}
        <p><b>Remoção de snapshots finalizada</b> — Sucesso: {{ success_items }}/{{ total_items }} na VM <b>{{ guest_name }}</b>.</p>
        <ul>
        {{ report_html }}
        </ul>
        <p>vCenter: <b>{{ vcenter_hostname }}</b></p>
        <p>Datacenter: <b>{{ this_datacenter }}</b></p>
        <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>
  when: success_items | int > 0

info.yaml

---
- name: Iniciar relatório de info
  ansible.builtin.set_fact:
    report_html: ""

- name: Consultar snapshots das VMs
  block:
    - name: Coletar snapshots da VM
      community.vmware.vmware_guest_snapshot_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter: "{{ this_datacenter }}"
        folder: "/{{ this_datacenter }}/vm/"
        name: "{{ vm }}"
      loop: "{{ guest_names }}"
      loop_control:
        loop_var: vm
        label: "{{ vm }}"
      register: info_results

    - name: Montar HTML com a lista de snapshots (por VM)
      ansible.builtin.set_fact:
        report_html: >-
          {{ report_html }}
          {% set vm_name = item.item %}
          {% set snaps = (item.guest_snapshots.snapshots | default([])) %}
          {% if snaps | length > 0 %}
          <h3 style="margin:10px 0 6px 0">VM: {{ vm_name }}</h3>
          <table border="1" cellpadding="6" cellspacing="0">
            <thead>
              <tr>
                <th align="left">Nome</th>
                <th align="left">Descrição</th>
                <th align="left">Criação</th>
                <th align="left">Estado</th>
              </tr>
            </thead>
            <tbody>
            {% for s in snaps %}
              <tr>
                <td>{{ s.name }}</td>
                <td>{{ s.description | default('') }}</td>
                <td>{{ s.createTime | default(s.create_time | default('')) }}</td>
                <td>{{ s.state | default('') }}</td>
              </tr>
            {% endfor %}
            </tbody>
          </table>
          {% endif %}
      loop: "{{ info_results.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Montar HTML (sem resultados) por VM
      ansible.builtin.set_fact:
        report_html: >-
          {{ report_html }}
          {% set vm_name = item.item %}
          {% set snaps = (item.guest_snapshots.snapshots | default([])) %}
          {% if snaps | length == 0 %}
          <h3 style="margin:10px 0 6px 0">VM: {{ vm_name }}</h3>
          <p><i>Não existem snapshots para a VM <b>{{ vm_name }}</b>.</i></p>
          {% endif %}
      loop: "{{ info_results.results }}"
      loop_control:
        label: "{{ item.item }}"

  rescue:
    - name: Email de falha na consulta
      ansible.builtin.set_stats:
        data:
          send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
          send_mail_body: |
            <p>Falha ao consultar snapshots.</p>
            <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>

    - name: Falhar o job
      ansible.builtin.fail:
        msg: "A consulta de snapshots falhou."

- name: Email de sucesso na consulta
  ansible.builtin.set_stats:
    data:
      send_mail_subject: "Ansible - Snapshot - {{ action }} - Job #{{ awx_job_id }}"
      send_mail_body: |
        {{ send_mail_body | default('') }}
        <p><b>Relatório de snapshots</b></p>
        {{ report_html }}
        <p>vCenter: <b>{{ vcenter_hostname }}</b></p>
        <p>Datacenter: <b>{{ this_datacenter }}</b></p>
        <p>Job: <a href="/#/jobs/playbook/{{ awx_job_id }}/output">{{ awx_job_id }}</a></p>




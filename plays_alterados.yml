linux_manager_service.yml

- name: Coletando informações de serviços (service_facts)
  ansible.builtin.service_facts:

- name: Normalizar listas (remove .service)
  ansible.builtin.set_fact:
    systemd_short_names: "{{ ansible_facts.services.keys() | map('regex_replace','\\.service$','') | list }}"

- name: Determina serviços elegíveis
  set_fact:
    lsm_target_services: "{{ linux_services | intersect(systemd_short_names) }}"

- name: Determinar serviços ausentes no host (Linux)
  ansible.builtin.set_fact:
    lsm_missing_services: "{{ linux_services | difference(lsm_target_services) }}"

- name: Garantir variáveis custom existem
  ansible.builtin.set_fact:
    linux_custom_cmds: "{{ linux_custom_cmds | default({}) }}"
    lsm_custom_ids: >-
      {{
        (linux_custom_cmds | dict2items | map(attribute='key') | list)
        if (linux_custom_cmds | length > 0)
        else []
      }}

- name: Separar serviços custom
  ansible.builtin.set_fact:
    lsm_systemd_final: "{{ lsm_target_services | difference(lsm_custom_ids) }}"

- name: "{{ lsm_state }} serviços systemd permitidos"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "{{ lsm_state }}"
  loop: "{{ lsm_systemd_final }}"
  loop_control:
    label: "{{ item }}"
  register: lsm_action
  ignore_errors: true

- name: Inicializa lista de resultados por serviço
  ansible.builtin.set_fact:
    host_rows: []

- name: Construir linhas de resultado
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
      'name': item.item,
      'after': item.state | default('unknown'),
      'ok': (
      (lsm_state == 'started'   and (item.state | default('') in ['running','started']))
      or (lsm_state == 'stopped'   and item.state == 'stopped')
      or (lsm_state == 'restarted' and (item.state | default('') in ['running','started']))
      ) and not (item.failed | default(false)),
      'error': (item.msg | default('')) if (item.failed | default(false)) else ''
      } ] }}"
  loop: "{{ lsm_action.results }}"
  loop_control:
    label: "{{ item.item }}"
  changed_when: false

- name: Preparar flags de ação
  ansible.builtin.set_fact:
    do_start: "{{ lsm_state in ['started','restarted'] }}"
    do_stop: "{{ lsm_state in ['stopped','restarted'] }}"
    do_restart: "{{ lsm_state == 'restarted' }}"

- name: Preparar lista de serviços custom
  ansible.builtin.set_fact:
    custom_list: "{{ (linux_custom_cmds | default({})) | dict2items }}"

- name: Garantir variáveis custom_present / custom_absent existem
  ansible.builtin.set_fact:
    custom_present: []
    custom_absent: []

- name: Checar presença do binário START de cada custom
  ansible.builtin.stat:
    path: "{{ item.value.start.split()[0] }}"
  loop: "{{ custom_list | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_start_stat
  when: custom_list | length > 0

- name: Separar custom presentes e ausentes
  ansible.builtin.set_fact:
    custom_present: >-
      {{
        custom_list | zip(custom_start_stat.results)
        | selectattr('1.stat.exists','equalto',True)
        | map(attribute='0') | list
      }}
    custom_absent: >-
      {{
        custom_list | zip(custom_start_stat.results)
        | rejectattr('1.stat.exists','equalto',True)
        | map(attribute='0') | list
      }}
  when: custom_list | length > 0

- name: STOP custom
  ansible.builtin.shell: "{{ item.value.stop }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_stop
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - do_stop

- name: Pausa rápida antes do START
  ansible.builtin.pause:
    seconds: 2
  when: custom_present | length > 0 and do_restart

- name: START custom
  ansible.builtin.shell: "{{ item.value.start }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_start
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - do_start

- name: STATUS custom
  ansible.builtin.shell: "{{ item.value.status }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_status
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - item.value.status is defined

- name: Acrescentar linhas para custom PRESENTES
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
      'name': item.value.display | default(item.key),
      'after': (do_restart | ternary('restarted',
      (do_start and not do_stop) | ternary('started',
      (do_stop and not do_start) | ternary('stopped','executado')))),
      'ok': (
      (do_restart and
      (custom_stop.results[loop.index0].rc | default(0) == 0) and
      (custom_start.results[loop.index0].rc | default(0) == 0)
      )
      or (do_start and (custom_start.results[loop.index0].rc | default(0) == 0))
      or (do_stop  and (custom_stop.results[loop.index0].rc  | default(0) == 0))
      ),
      'error': (
      (custom_stop.results[loop.index0].stderr  | default('')) ~ ' ' ~
      (custom_start.results[loop.index0].stderr | default(''))
      )
      } ] }}"
  loop: "{{ custom_present | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  when: custom_present | length > 0

- name: Acrescentar linhas para custom AUSENTES
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
      'name': item.value.display | default(item.key),
      'after': 'absent',
      'ok': false,
      'error': 'Comando não encontrado no host'
      } ] }}"
  loop: "{{ custom_absent | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  when: custom_absent | length > 0

- name: Adicionar linhas de serviços ausentes (Linux - systemd)
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
      'name': item,
      'after': 'absent',
      'ok': false,
      'error': 'Serviço não encontrado no host'
      } ] }}"
  loop: >-
    {{
      lsm_missing_services
      | difference(lsm_custom_ids | default([]))
      | difference(hostvars['localhost'].windows_services | default([]))
    }}
  when: lsm_missing_services | length > 0

- name: Montar objeto de relatório por host (Linux)
  ansible.builtin.set_fact:
    service_host_report:
      host: "{{ inventory_hostname }}"
      os: "linux"
      expected: "{{ lsm_state }}"
      rows: "{{ host_rows }}"

windows_manager_service.yml

- name: Normaliza wsm_start_mode em lista
  ansible.builtin.set_fact:
    wsm_start_mode_list: >-
      {{
        wsm_start_mode_raw
        if (wsm_start_mode_raw is sequence and wsm_start_mode_raw is not string)
        else (wsm_start_mode_raw | replace(' ', '') | lower | split(','))
      }}

- name: Coletando informações de serviços
  ansible.windows.win_service_info:
  register: wsm_host_services

- name: Determinar serviços ausentes no host (Windows)
  ansible.builtin.set_fact:
    wsm_missing_services: >-
      {{ (windows_services | default([]))
         | difference( (wsm_host_services.services | default([]))
                       | map(attribute='name') | list ) }}

- name: Determina serviços elegíveis
  ansible.builtin.set_fact:
    wsm_target_services: >-
      {{
        wsm_host_services.services
        | selectattr('name', 'in', windows_services)
        | selectattr('start_mode', 'in', wsm_start_mode_list)
        | map(attribute='name')
        | list
      }}

- name: "{{ wsm_state }} serviços permitidos"
  ansible.windows.win_service:
    name: "{{ item }}"
    state: "{{ wsm_state }}"
  loop: "{{ wsm_target_services }}"
  loop_control:
    label: "{{ item }}"
  register: wsm_action
  ignore_errors: true

- name: Inicializa rows
  set_fact:
    host_rows: []

- name: Construir rows
  set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item.item,
        'after': item.state | default('unknown'),
        'ok': (
            (wsm_state == 'started' and (item.state in ['running','started']))
            or
            (wsm_state == 'stopped' and item.state == 'stopped')
            or
            (wsm_state == 'restarted' and (item.state in ['running','started']))
        ) and (not (item.failed | default(false))),
        'error': (item.msg | default('')) if (item.failed | default(false)) else ''
      } ] }}"
  loop: "{{ wsm_action.results }}"
  loop_control:
    label: "{{ item.item }}"
  changed_when: false

- name: Adicionar linhas de serviços ausentes (Windows)
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item,
        'after': 'absent',
        'ok': false,
        'found': false,
        'error': 'Serviço não encontrado no host'
      } ] }}"
  loop: >-
    {{
      wsm_missing_services
      | difference(hostvars['localhost'].linux_services | default([]))
    }}
  when: wsm_missing_services | length > 0

- name: Ajustar relatório final por host (Windows)
  set_fact:
    service_host_report:
      host: "{{ inventory_hostname }}"
      os: "windows"
      expected: "{{ wsm_state }}"
      rows: "{{ host_rows }}"

setup_services.yml

- name: Normalizar listas vindas do Survey
  ansible.builtin.set_fact:
    service_profile_norm: >-
      {{
        service_profile
        if (service_profile is sequence and service_profile is not string)
        else (service_profile | default('') | replace(',', ' ') | split())
      }}
    service_specific_norm: >-
      {{
        service_specific
        if (service_specific is sequence and service_specific is not string)
        else (service_specific | default('') | replace(',', ' ') | split())
      }}

- name: Converter lista de específicos em lista única
  ansible.builtin.set_fact:
    service_specific_list: "{{ service_specific_norm | unique }}"

- name: Incluir vars do perfil
  ansible.builtin.include_vars:
    file: "vars/services/{{ item | lower }}.yml"
    name: "service_{{ item | lower }}"
  loop: "{{ service_profile_norm }}"
  register: service_files
  failed_when: false
  when: service_profile_norm | length > 0

- name: Montar listas (perfils)
  ansible.builtin.set_fact:
    linux_services: "{{ (linux_services  | default([])) + _svc.linux_services   | default([item]) }}"
    windows_services: "{{ (windows_services | default([])) + _svc.windows_services | default([item]) }}"
    linux_custom_cmds: "{{ (linux_custom_cmds | default({})) | combine(_svc.linux_custom_cmds | default({})) }}"
  vars:
    _svc: "{{ lookup('vars', 'service_' + item | lower) | default({}) }}"
  loop: "{{ service_profile_norm }}"
  when: service_profile_norm | length > 0

- name: Acrescentar serviços individuais do Survey
  ansible.builtin.set_fact:
    linux_services: "{{ (linux_services  | default([]))  + service_specific_norm }}"
    windows_services: "{{ (windows_services | default([])) + service_specific_norm }}"
  when: service_specific_norm | length > 0

- name: Filtrar listas com base em service_specific (se definido)
  ansible.builtin.set_fact:
    linux_services: "{{ linux_services   | intersect(service_specific_list) }}"
    windows_services: "{{ windows_services | intersect(service_specific_list) }}"
  when: service_specific_list | length > 0

- ansible.builtin.set_fact:
    linux_services: "{{ linux_services | unique }}"
    windows_services: "{{ windows_services | unique }}"

- debug: var=linux_services
- debug: var=windows_services

service_manager.yml

- name: Gerenciamento de serviços em hosts Linux e Windows
  hosts: localhost
  gather_facts: false
  vars:
    target_hosts: "{{ survey_hosts.split(',') | map('trim') | list }}"
    services: "{{ (service_profile | default('')) | replace(',', ' ') | split() | map('trim') | list }}"
  tasks:
    - name: Adiciona dinamicamente cada host
      ansible.builtin.add_host:
        name: "{{ item }}"
      loop: "{{ target_hosts }}"

    - name: Garantir variáveis vindas do Survey
      ansible.builtin.set_fact:
        service_profile:  "{{ service_profile  | default('') }}"
        service_specific: "{{ service_specific | default('') }}"
    
    - name: Normalizar lista de services
      set_fact:
        services: >-
          {{
            service_profile
            if (service_profile is sequence and service_profile is not string)
            else (service_profile | replace(',', ' ') | split())
          }}

    - name: Construindo a lista de hosts
      ansible.builtin.include_tasks: tasks/create_dynamic_hosts.yml
    
    - name: Hosts inalcançáveis
      set_fact:
        unreachable_hosts: "{{ target_hosts | difference(linux_list + windows_list) }}"

    - name: Criando estrutura dos serviços
      ansible.builtin.include_tasks: tasks/setup_services.yml

- ansible.builtin.import_playbook: playbook_service_windows.yml

- ansible.builtin.import_playbook: playbook_service_linux.yml

- ansible.builtin.import_playbook: playbook_create_report_email.yml


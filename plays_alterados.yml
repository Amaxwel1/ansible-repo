playbook_create_report_email.yml

- name: Consolidar relatório geral de serviços
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Juntar relatórios de cada host
      ansible.builtin.set_fact:
        service_reports: >-
          {{
            (groups.linux_targets | default([]) + groups.windows_targets | default([]))
            | map('extract', hostvars, 'service_host_report')
            | select('defined')
            | list
          }}
        unreachable_hosts: "{{ unreachable_hosts | default([]) }}"

    - name: Calcular lista de serviços testados (Survey)
      ansible.builtin.set_fact:
        services_tested: "{{ services | default([]) | unique | join(', ') }}"

    - name: Calcular erros
      ansible.builtin.set_fact:
        bad_rows: >-
          {{
            service_reports
            | map(attribute='rows')
            | flatten
            | selectattr('ok','equalto',False)
            | list
          }}
        any_errors: >-
          {{
            (unreachable_hosts | length > 0)
            or (
              service_reports
              | map(attribute='rows')
              | flatten
              | selectattr('ok','equalto',False)
              | list
              | length > 0
            )
          }}

    - name: Montar HTML final
      ansible.builtin.set_fact:
        send_mail_body: |
          {% set show_map = {
            'restarted':'started',
            'restart':'started',
            'running':'started'
          } %}
          <h2>Gerenciamento de Serviços</h2>
          <p><b>Motivo:</b> {{ (motivo | default('N/D')) | e }}</p>
          {% if services_tested %}
            <p><b>Serviços testados:</b> {{ services_tested }}</p>
          {% endif %}

          {% if unreachable_hosts and unreachable_hosts|length > 0 %}
          <h3 style="color:#d9534f;">Hosts inalcançáveis</h3>
          <ul>
            {% for h in unreachable_hosts %}
              <li>{{ h }}</li>
            {% endfor %}
          </ul>
          {% endif %}

          {% set linux_reports   = service_reports | selectattr('os','equalto','linux')   | list %}
          {% set windows_reports = service_reports | selectattr('os','equalto','windows') | list %}

          {% if linux_reports %}
            {% set expected_linux_raw = linux_reports[0].expected | lower %}
            {% set expected_linux = show_map.get(expected_linux_raw, expected_linux_raw) | capitalize %}
            <h3>Servidores Linux</h3>
            <p><b>Estado esperado:</b> {{ expected_linux }}</p>
            <table style="border-collapse:collapse;font-family:Arial;font-size:12px;">
              <tr style="background:#f2f2f2;">
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Servidor</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Serviço</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Estado</th>
              </tr>
              {% for rep in linux_reports %}
                {% for r in rep.rows %}
                  {% set after_disp = show_map.get(r.after|lower, r.after) %}
                  <tr>
                    <td style="border:1px solid #ccc;padding:4px;">{{ rep.host }}</td>
                    <td style="border:1px solid #ccc;padding:4px;">{{ r.name }}</td>
                    <td style="border:1px solid #ccc;padding:4px;color:{{ 'green' if r.ok else 'red' }};">
                      {{ after_disp }}
                    </td>
                  </tr>
                {% endfor %}
              {% endfor %}
            </table>
          {% endif %}

          {% if windows_reports %}
            {% set expected_windows_raw = windows_reports[0].expected | lower %}
            {% set expected_windows = show_map.get(expected_windows_raw, expected_windows_raw) | capitalize %}
            <h3 style="margin-top:24px;">Servidores Windows</h3>
            <p><b>Estado esperado:</b> {{ expected_windows }}</p>
            <table style="border-collapse:collapse;font-family:Arial;font-size:12px;">
              <tr style="background:#f2f2f2;">
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Servidor</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Serviço</th>
                <th style="border:1px solid #ccc;padding:4px;text-align:left;">Estado</th>
              </tr>
              {% for rep in windows_reports %}
                {% for r in rep.rows %}
                  {% set after_disp = show_map.get(r.after|lower, r.after) %}
                  <tr>
                    <td style="border:1px solid #ccc;padding:4px;">{{ rep.host }}</td>
                    <td style="border:1px solid #ccc;padding:4px;">{{ r.name }}</td>
                    <td style="border:1px solid #ccc;padding:4px;color:{{ 'green' if r.ok else 'red' }};">
                      {{ after_disp }}
                    </td>
                  </tr>
                {% endfor %}
              {% endfor %}
            </table>
          {% endif %}

          {% if not any_errors %}
            <p style="color:green;margin-top:18px;"><b>Todos os serviços estão no estado esperado.</b></p>
          {% else %}
            <p style="color:red;margin-top:18px;"><b>Existem divergências (ver tabelas acima).</b></p>
          {% endif %}

    - name: Definir subject
      ansible.builtin.set_stats:
        data:
          send_mail_subject: "Ansible-Report - Job #{{ awx_job_id }} - {{ awx_job_template_name }} - {{ 'SUCESSO' if not any_errors else 'ALERTA' }}"
          send_mail_body: "{{ send_mail_body }}"

linux_manager_service.yml

- name: Coletando informações de serviços (service_facts)
  ansible.builtin.service_facts:

- name: Normalizar listas (remove .service)
  ansible.builtin.set_fact:
    systemd_short_names: "{{ ansible_facts.services.keys() | map('regex_replace','\\.service$','') | list }}"

- name: Determina serviços elegíveis
  set_fact:
    lsm_target_services: "{{ linux_services | intersect(systemd_short_names) }}"

- name: Determinar serviços ausentes no host (Linux)
  ansible.builtin.set_fact:
    lsm_missing_services: "{{ linux_services | difference(lsm_target_services) }}"

- name: Garantir variáveis custom existem
  ansible.builtin.set_fact:
    linux_custom_cmds: "{{ linux_custom_cmds | default({}) }}"
    lsm_custom_ids: >-
      {{
        (linux_custom_cmds | dict2items | map(attribute='key') | list)
        if (linux_custom_cmds | length > 0)
        else []
      }}

- name: Separar serviços custom
  ansible.builtin.set_fact:
    lsm_systemd_final: "{{ lsm_target_services | difference(lsm_custom_ids) }}"

- name: "{{ lsm_state }} serviços systemd permitidos"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "{{ lsm_state }}"
  loop: "{{ lsm_systemd_final }}"
  loop_control:
    label: "{{ item }}"
  register: lsm_action
  ignore_errors: true

- name: Inicializa lista de resultados por serviço
  ansible.builtin.set_fact:
    host_rows: []

- name: Construir linhas de resultado
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item.item,
        'after': item.state | default('unknown'),
        'ok': (
              (lsm_state == 'started'   and (item.state | default('') in ['running','started']))
           or (lsm_state == 'stopped'   and item.state == 'stopped')
           or (lsm_state == 'restarted' and (item.state | default('') in ['running','started']))
        ) and not (item.failed | default(false)),
        'error': (item.msg | default('')) if (item.failed | default(false)) else ''
      } ] }}"
  loop: "{{ lsm_action.results }}"
  loop_control:
    label: "{{ item.item }}"
  changed_when: false

- name: Preparar flags de ação
  ansible.builtin.set_fact:
    do_start:   "{{ lsm_state in ['started','restarted'] }}"
    do_stop:    "{{ lsm_state in ['stopped','restarted'] }}"
    do_restart: "{{ lsm_state == 'restarted' }}"

- name: Preparar lista de serviços custom
  ansible.builtin.set_fact:
    custom_list: "{{ (linux_custom_cmds | default({})) | dict2items }}"

- name: Checar presença do binário START de cada custom
  ansible.builtin.stat:
    path: "{{ item.value.start.split()[0] }}"
  loop: "{{ custom_list | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_start_stat
  when: custom_list | length > 0

- name: Separar custom presentes e ausentes
  ansible.builtin.set_fact:
    custom_present: >-
      {{
        custom_list | zip(custom_start_stat.results)
        | selectattr('1.stat.exists','equalto',True)
        | map(attribute='0') | list
      }}
    custom_absent: >-
      {{
        custom_list | zip(custom_start_stat.results)
        | rejectattr('1.stat.exists','equalto',True)
        | map(attribute='0') | list
      }}
  when: custom_list | length > 0

- name: STOP custom
  ansible.builtin.shell: "{{ item.value.stop }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_stop
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - do_stop

- name: Pausa rápida antes do START
  ansible.builtin.pause:
    seconds: 2
  when: custom_present | length > 0 and do_restart

- name: START custom
  ansible.builtin.shell: "{{ item.value.start }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_start
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - do_start

- name: STATUS custom
  ansible.builtin.shell: "{{ item.value.status }}"
  loop: "{{ custom_present }}"
  loop_control: { label: "{{ item.key }}" }
  register: custom_status
  failed_when: false
  changed_when: false
  when:
    - custom_present | length > 0
    - item.value.status is defined

- name: Acrescentar linhas para custom PRESENTES
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item.value.display | default(item.key),
        'after': (do_restart | ternary('restarted',
                   (do_start and not do_stop) | ternary('started',
                     (do_stop and not do_start) | ternary('stopped','executado')))),
        'ok': (
               (do_restart and
                 (custom_stop.results[loop.index0].rc | default(0) == 0) and
                 (custom_start.results[loop.index0].rc | default(0) == 0)
               )
            or (do_start and (custom_start.results[loop.index0].rc | default(0) == 0))
            or (do_stop  and (custom_stop.results[loop.index0].rc  | default(0) == 0))
        ),
        'error': (
           (custom_stop.results[loop.index0].stderr  | default('')) ~ ' ' ~
           (custom_start.results[loop.index0].stderr | default(''))
        )
      } ] }}"
  loop: "{{ custom_present | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  when: custom_present | length > 0

- name: Acrescentar linhas para custom AUSENTES
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item.value.display | default(item.key),
        'after': 'absent',
        'ok': false,
        'error': 'Comando não encontrado no host'
      } ] }}"
  loop: "{{ custom_absent | default([]) }}"
  loop_control: { label: "{{ item.key }}" }
  when: custom_absent | length > 0

- name: Adicionar linhas de serviços ausentes (Linux - systemd)
  ansible.builtin.set_fact:
    host_rows: "{{ host_rows + [ {
        'name': item,
        'after': 'absent',
        'ok': false,
        'error': 'Serviço não encontrado no host'
      } ] }}"
  loop: "{{ lsm_missing_services | difference(lsm_custom_ids | default([])) }}"
  when: lsm_missing_services | length > 0

- name: Montar objeto de relatório por host (Linux)
  ansible.builtin.set_fact:
    service_host_report:
      host: "{{ inventory_hostname }}"
      os: "linux"
      expected: "{{ lsm_state }}"
      rows: "{{ host_rows }}"


setup_services.yml

- name: "Incluir vars do perfil"
  ansible.builtin.include_vars:
    file: "vars/services/{{ item | lower }}.yml"
    name: "service_{{ item | lower }}"
  loop: "{{ services }}"
  register: service_files
  failed_when: false

- name: Montar listas finais
  ansible.builtin.set_fact:
    linux_services: "{{ (linux_services   | default([])) + _service.linux_services   | default([item]) }}"
    windows_services: "{{ (windows_services | default([])) + _service.windows_services | default([item]) }}"
    linux_custom_cmds: "{{ (linux_custom_cmds | default({})) | combine( _service.linux_custom_cmds | default({}) ) }}"
  vars:
    _service: "{{ lookup('vars', 'service_' + item | lower) | default({}) }}"
  loop: "{{ services }}"

- ansible.builtin.set_fact:
    linux_services: "{{ linux_services | unique }}"
    windows_services: "{{ windows_services | unique }}"

playbook_service_linux.yml

---
- name: Gerenciar serviços em hosts Linux
  hosts: linux_targets
  become: true
  become_user: root
  
  gather_facts: false
  vars:
    state_map:
      start: started
      stop: stopped
      restart: restarted
    lsm_state: "{{ state_map.get(service_state | lower | trim, service_state) }}"
    lsm_errors: []
    linux_services: "{{ hostvars['localhost'].linux_services | default([]) }}"
    linux_custom_cmds: "{{ hostvars['localhost'].linux_custom_cmds | default({}) }}"
  tasks:
    - name: Captura apenas os fatos necessários
      ansible.builtin.setup:
        gather_subset:
        - '!all'
        - '!min'
        - platform
        - distribution

    - name: Gerenciar serviços nos hosts linux
      ansible.builtin.include_tasks: tasks/linux_manager_service.yml

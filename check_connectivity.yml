---
- name: Preparar hosts e destinos
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Validar variáveis obrigatórias
      ansible.builtin.assert:
        that:
          - connection_test_hosts is defined
          - connection_test_destiny is defined
          - connection_test_type is defined
        fail_msg: Variáveis connection_test_hosts, connection_test_destiny e connection_test_type devem ser definidas no Survey.

    - name: Normalizar listas de origem e destino
      ansible.builtin.set_fact:
        connection_test_hosts_parsed: "{{ connection_test_hosts.split(',') | map('trim') | reject('equalto','') | list }}"
        connection_test_destiny_parsed: "{{ connection_test_destiny.split(',') | map('trim') | reject('equalto','') | list }}"

    - name: Adicionar hosts ao grupo dinâmico
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: test_dynamic
        connection_test_host: "{{ item }}"
      loop: "{{ connection_test_hosts_parsed }}"

    - name: Testar porta 22 em hosts de origem
      ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 22
        timeout: 3
        state: started
      register: ssh_probe
      failed_when: false
      loop: "{{ connection_test_hosts_parsed }}"

    - name: Testar porta 5985 em hosts de origem
      ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 5985
        timeout: 3
        state: started
      register: winrm_probe
      failed_when: false
      loop: "{{ connection_test_hosts_parsed }}"

    - name: Definir listas linux e windows
      ansible.builtin.set_fact:
        linux_list: "{{ ssh_probe.results | selectattr('elapsed','<',3) | map(attribute='item') | list }}"
        windows_list: "{{ winrm_probe.results | selectattr('elapsed','<',3) | map(attribute='item') | list }}"

    - name: Definir hosts inacessíveis
      ansible.builtin.set_fact:
        unreachable_hosts: "{{ connection_test_hosts_parsed | difference(linux_list + windows_list) }}"

    - name: Adicionar hosts Linux com credenciais
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: test_dynamic
        ansible_user: "{{ ansible_user }}"
        ansible_password: "{{ ansible_password | default(omit) }}"
        ansible_ssh_private_key_file: "{{ linux_key | default(omit) }}"
        ansible_port: "{{ linux_port | default(22) }}"
      loop: "{{ linux_list }}"
      when: linux_list | length > 0
      no_log: true

    - name: Adicionar hosts Windows com credenciais
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: test_dynamic
        ansible_connection: winrm
        ansible_user: "{{ ansible_user }}"
        ansible_password: "{{ ansible_password }}"
        ansible_port: "{{ win_port | default(5985) }}"
        ansible_winrm_transport: ntlm
        ansible_winrm_server_cert_validation: ignore
      loop: "{{ windows_list }}"
      when: windows_list | length > 0
      no_log: true

    - name: Publicar variáveis globais
      ansible.builtin.set_stats:
        data:
          connection_test_destiny_parsed: "{{ connection_test_destiny_parsed }}"
          connection_test_type: "{{ connection_test_type }}"
          unreachable_hosts: "{{ unreachable_hosts }}"

- name: Executar testes de conectividade
  hosts: test_dynamic
  gather_facts: false
  vars:
    dest_list: "{{ hostvars['localhost'].connection_test_destiny_parsed }}"
    connection_test_type: "{{ hostvars['localhost'].connection_test_type }}"
  tasks:
    - name: Registrar erro se portas fechadas
      block:
        - name: Gravar erro de portas
          ansible.builtin.set_stats:
            data:
              connection_test_error: "Portas 22 e 5985 não respondem para <b>{{ inventory_hostname }}</b>."
        - name: Encerrar host por portas fechadas
          ansible.builtin.meta: end_host
      when: inventory_hostname in (hostvars['localhost'].unreachable_hosts | default([]))

    - name: Coletar fatos mínimos
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - '!min'
          - platform
      register: _facts
      ignore_unreachable: true

    - name: Registrar erro de autenticação se necessário
      block:
        - name: Gravar erro de autenticação
          ansible.builtin.set_stats:
            data:
              connection_test_error: |
                Falha de autenticação/conexão em <b>{{ inventory_hostname }}</b>:<br/>
                <pre>{{ _facts.msg }}</pre>
        - name: Encerrar host por erro de autenticação
          ansible.builtin.meta: end_host
      when: _facts.unreachable is defined and _facts.unreachable

    - name: Definir diretório do sistema operacional
      ansible.builtin.set_fact:
        _os_dir: "{{ 'windows'
                    if (ansible_os_family | default(ansible_system) | lower) is match('.*win.*')
                    else 'linux' }}"
    
    - name: Incluir task específico conforme SO
      ansible.builtin.include_tasks: "{{ _os_dir }}/{{ connection_test_type }}.yml"

- name: Montar corpo de e‑mail consolidado
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Separar hosts com e sem erro
      ansible.builtin.set_fact:
        error_hosts: "{{ groups['test_dynamic'] | default([]) | selectattr('connection_test_error','defined') | list }}"
        ok_hosts: "{{ groups['test_dynamic'] | default([]) | rejectattr('connection_test_error','defined') | list }}"

    - name: Construir lista de resultados
      ansible.builtin.set_fact:
        test_blocks: "{{ test_blocks | default([]) + [ { 'host': item, 'rows': hostvars[item].connection_test_outputs.results } ] }}"
      loop: "{{ ok_hosts }}"
      when: hostvars[item].connection_test_outputs is defined

    - name: Gerar HTML do relatório
      ansible.builtin.set_fact:
        send_mail_body: |
          <h3>Relatório de Conectividade ({{ connection_test_type | upper }})</h3>
          {% if hostvars['localhost'].unreachable_hosts %}
            <h4 style="color:red;">Hosts inacessíveis (portas 22/5985)</h4>
            <ul>{% for h in hostvars['localhost'].unreachable_hosts %}<li>{{ h }}</li>{% endfor %}</ul>
          {% endif %}
          {% if error_hosts %}
            <h4 style="color:red;">Hosts com erro de autenticação/conexão</h4>
            {% for h in error_hosts %}
              <p>{{ hostvars[h].connection_test_error | safe }}</p>
            {% endfor %}
          {% endif %}
          {% if test_blocks %}
            <h4>Resultados dos testes executados</h4>
            {% for block in test_blocks %}
              <p><b>{{ block.host }}</b></p>
              <table border="1" cellspacing="0" cellpadding="4">
                <tr><th>Destino</th><th>Status</th></tr>
                {% for r in block.rows %}
                  <tr>
                    <td>{{ hostvars['localhost'].connection_test_destiny_parsed[loop.index0] }}</td>
                    <td style="color:{{ 'green' if not r.failed else 'red' }};">{{ 'OK' if not r.failed else 'ERRO' }}</td>
                  </tr>
                {% endfor %}
              </table>
            {% endfor %}
          {% endif %}

    - name: Publicar artefato do e‑mail
      ansible.builtin.set_stats:
        data:
          send_mail_subject: "Connectivity Report - Job #{{ awx_job_id }}"
          send_mail_body: "{{ send_mail_body }}"